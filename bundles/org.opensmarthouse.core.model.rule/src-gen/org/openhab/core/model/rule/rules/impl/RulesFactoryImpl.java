/**
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.rule.rules.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.openhab.core.model.rule.rules.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RulesFactoryImpl extends EFactoryImpl implements RulesFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RulesFactory init()
  {
    try
    {
      RulesFactory theRulesFactory = (RulesFactory)EPackage.Registry.INSTANCE.getEFactory(RulesPackage.eNS_URI);
      if (theRulesFactory != null)
      {
        return theRulesFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RulesFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RulesFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RulesPackage.RULE_MODEL: return createRuleModel();
      case RulesPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case RulesPackage.RULE: return createRule();
      case RulesPackage.EVENT_TRIGGER: return createEventTrigger();
      case RulesPackage.COMMAND_EVENT_TRIGGER: return createCommandEventTrigger();
      case RulesPackage.GROUP_MEMBER_COMMAND_EVENT_TRIGGER: return createGroupMemberCommandEventTrigger();
      case RulesPackage.UPDATE_EVENT_TRIGGER: return createUpdateEventTrigger();
      case RulesPackage.GROUP_MEMBER_UPDATE_EVENT_TRIGGER: return createGroupMemberUpdateEventTrigger();
      case RulesPackage.CHANGED_EVENT_TRIGGER: return createChangedEventTrigger();
      case RulesPackage.GROUP_MEMBER_CHANGED_EVENT_TRIGGER: return createGroupMemberChangedEventTrigger();
      case RulesPackage.EVENT_EMITTED_TRIGGER: return createEventEmittedTrigger();
      case RulesPackage.TIMER_TRIGGER: return createTimerTrigger();
      case RulesPackage.SYSTEM_TRIGGER: return createSystemTrigger();
      case RulesPackage.SYSTEM_ON_STARTUP_TRIGGER: return createSystemOnStartupTrigger();
      case RulesPackage.SYSTEM_ON_SHUTDOWN_TRIGGER: return createSystemOnShutdownTrigger();
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER: return createThingStateUpdateEventTrigger();
      case RulesPackage.THING_STATE_CHANGED_EVENT_TRIGGER: return createThingStateChangedEventTrigger();
      case RulesPackage.VALID_STATE: return createValidState();
      case RulesPackage.VALID_STATE_ID: return createValidStateId();
      case RulesPackage.VALID_STATE_NUMBER: return createValidStateNumber();
      case RulesPackage.VALID_STATE_STRING: return createValidStateString();
      case RulesPackage.VALID_COMMAND: return createValidCommand();
      case RulesPackage.VALID_COMMAND_ID: return createValidCommandId();
      case RulesPackage.VALID_COMMAND_NUMBER: return createValidCommandNumber();
      case RulesPackage.VALID_COMMAND_STRING: return createValidCommandString();
      case RulesPackage.VALID_TRIGGER: return createValidTrigger();
      case RulesPackage.VALID_TRIGGER_ID: return createValidTriggerId();
      case RulesPackage.VALID_TRIGGER_NUMBER: return createValidTriggerNumber();
      case RulesPackage.VALID_TRIGGER_STRING: return createValidTriggerString();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleModel createRuleModel()
  {
    RuleModelImpl ruleModel = new RuleModelImpl();
    return ruleModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventTrigger createEventTrigger()
  {
    EventTriggerImpl eventTrigger = new EventTriggerImpl();
    return eventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandEventTrigger createCommandEventTrigger()
  {
    CommandEventTriggerImpl commandEventTrigger = new CommandEventTriggerImpl();
    return commandEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupMemberCommandEventTrigger createGroupMemberCommandEventTrigger()
  {
    GroupMemberCommandEventTriggerImpl groupMemberCommandEventTrigger = new GroupMemberCommandEventTriggerImpl();
    return groupMemberCommandEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpdateEventTrigger createUpdateEventTrigger()
  {
    UpdateEventTriggerImpl updateEventTrigger = new UpdateEventTriggerImpl();
    return updateEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupMemberUpdateEventTrigger createGroupMemberUpdateEventTrigger()
  {
    GroupMemberUpdateEventTriggerImpl groupMemberUpdateEventTrigger = new GroupMemberUpdateEventTriggerImpl();
    return groupMemberUpdateEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChangedEventTrigger createChangedEventTrigger()
  {
    ChangedEventTriggerImpl changedEventTrigger = new ChangedEventTriggerImpl();
    return changedEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupMemberChangedEventTrigger createGroupMemberChangedEventTrigger()
  {
    GroupMemberChangedEventTriggerImpl groupMemberChangedEventTrigger = new GroupMemberChangedEventTriggerImpl();
    return groupMemberChangedEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventEmittedTrigger createEventEmittedTrigger()
  {
    EventEmittedTriggerImpl eventEmittedTrigger = new EventEmittedTriggerImpl();
    return eventEmittedTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimerTrigger createTimerTrigger()
  {
    TimerTriggerImpl timerTrigger = new TimerTriggerImpl();
    return timerTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemTrigger createSystemTrigger()
  {
    SystemTriggerImpl systemTrigger = new SystemTriggerImpl();
    return systemTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemOnStartupTrigger createSystemOnStartupTrigger()
  {
    SystemOnStartupTriggerImpl systemOnStartupTrigger = new SystemOnStartupTriggerImpl();
    return systemOnStartupTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemOnShutdownTrigger createSystemOnShutdownTrigger()
  {
    SystemOnShutdownTriggerImpl systemOnShutdownTrigger = new SystemOnShutdownTriggerImpl();
    return systemOnShutdownTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingStateUpdateEventTrigger createThingStateUpdateEventTrigger()
  {
    ThingStateUpdateEventTriggerImpl thingStateUpdateEventTrigger = new ThingStateUpdateEventTriggerImpl();
    return thingStateUpdateEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingStateChangedEventTrigger createThingStateChangedEventTrigger()
  {
    ThingStateChangedEventTriggerImpl thingStateChangedEventTrigger = new ThingStateChangedEventTriggerImpl();
    return thingStateChangedEventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidState createValidState()
  {
    ValidStateImpl validState = new ValidStateImpl();
    return validState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidStateId createValidStateId()
  {
    ValidStateIdImpl validStateId = new ValidStateIdImpl();
    return validStateId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidStateNumber createValidStateNumber()
  {
    ValidStateNumberImpl validStateNumber = new ValidStateNumberImpl();
    return validStateNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidStateString createValidStateString()
  {
    ValidStateStringImpl validStateString = new ValidStateStringImpl();
    return validStateString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidCommand createValidCommand()
  {
    ValidCommandImpl validCommand = new ValidCommandImpl();
    return validCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidCommandId createValidCommandId()
  {
    ValidCommandIdImpl validCommandId = new ValidCommandIdImpl();
    return validCommandId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidCommandNumber createValidCommandNumber()
  {
    ValidCommandNumberImpl validCommandNumber = new ValidCommandNumberImpl();
    return validCommandNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidCommandString createValidCommandString()
  {
    ValidCommandStringImpl validCommandString = new ValidCommandStringImpl();
    return validCommandString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidTrigger createValidTrigger()
  {
    ValidTriggerImpl validTrigger = new ValidTriggerImpl();
    return validTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidTriggerId createValidTriggerId()
  {
    ValidTriggerIdImpl validTriggerId = new ValidTriggerIdImpl();
    return validTriggerId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidTriggerNumber createValidTriggerNumber()
  {
    ValidTriggerNumberImpl validTriggerNumber = new ValidTriggerNumberImpl();
    return validTriggerNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValidTriggerString createValidTriggerString()
  {
    ValidTriggerStringImpl validTriggerString = new ValidTriggerStringImpl();
    return validTriggerString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RulesPackage getRulesPackage()
  {
    return (RulesPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RulesPackage getPackage()
  {
    return RulesPackage.eINSTANCE;
  }

} //RulesFactoryImpl
