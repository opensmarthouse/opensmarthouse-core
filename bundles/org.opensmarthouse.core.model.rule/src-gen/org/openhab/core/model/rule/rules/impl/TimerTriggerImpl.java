/**
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.rule.rules.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.openhab.core.model.rule.rules.RulesPackage;
import org.openhab.core.model.rule.rules.TimerTrigger;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Timer Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.openhab.core.model.rule.rules.impl.TimerTriggerImpl#getCron <em>Cron</em>}</li>
 *   <li>{@link org.openhab.core.model.rule.rules.impl.TimerTriggerImpl#getTime <em>Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimerTriggerImpl extends EventTriggerImpl implements TimerTrigger
{
  /**
   * The default value of the '{@link #getCron() <em>Cron</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCron()
   * @generated
   * @ordered
   */
  protected static final String CRON_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCron() <em>Cron</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCron()
   * @generated
   * @ordered
   */
  protected String cron = CRON_EDEFAULT;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final String TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected String time = TIME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimerTriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RulesPackage.Literals.TIMER_TRIGGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCron()
  {
    return cron;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCron(String newCron)
  {
    String oldCron = cron;
    cron = newCron;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.TIMER_TRIGGER__CRON, oldCron, cron));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTime(String newTime)
  {
    String oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.TIMER_TRIGGER__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RulesPackage.TIMER_TRIGGER__CRON:
        return getCron();
      case RulesPackage.TIMER_TRIGGER__TIME:
        return getTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RulesPackage.TIMER_TRIGGER__CRON:
        setCron((String)newValue);
        return;
      case RulesPackage.TIMER_TRIGGER__TIME:
        setTime((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RulesPackage.TIMER_TRIGGER__CRON:
        setCron(CRON_EDEFAULT);
        return;
      case RulesPackage.TIMER_TRIGGER__TIME:
        setTime(TIME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RulesPackage.TIMER_TRIGGER__CRON:
        return CRON_EDEFAULT == null ? cron != null : !CRON_EDEFAULT.equals(cron);
      case RulesPackage.TIMER_TRIGGER__TIME:
        return TIME_EDEFAULT == null ? time != null : !TIME_EDEFAULT.equals(time);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cron: ");
    result.append(cron);
    result.append(", time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //TimerTriggerImpl
