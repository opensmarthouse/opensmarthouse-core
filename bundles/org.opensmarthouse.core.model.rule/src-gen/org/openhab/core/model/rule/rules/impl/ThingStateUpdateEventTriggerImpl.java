/**
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.rule.rules.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.openhab.core.model.rule.rules.RulesPackage;
import org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Thing State Update Event Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.openhab.core.model.rule.rules.impl.ThingStateUpdateEventTriggerImpl#getThing <em>Thing</em>}</li>
 *   <li>{@link org.openhab.core.model.rule.rules.impl.ThingStateUpdateEventTriggerImpl#getState <em>State</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ThingStateUpdateEventTriggerImpl extends EventTriggerImpl implements ThingStateUpdateEventTrigger
{
  /**
   * The default value of the '{@link #getThing() <em>Thing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThing()
   * @generated
   * @ordered
   */
  protected static final String THING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getThing() <em>Thing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThing()
   * @generated
   * @ordered
   */
  protected String thing = THING_EDEFAULT;

  /**
   * The default value of the '{@link #getState() <em>State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected static final String STATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getState() <em>State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected String state = STATE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ThingStateUpdateEventTriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RulesPackage.Literals.THING_STATE_UPDATE_EVENT_TRIGGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getThing()
  {
    return thing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThing(String newThing)
  {
    String oldThing = thing;
    thing = newThing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__THING, oldThing, thing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setState(String newState)
  {
    String oldState = state;
    state = newState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__STATE, oldState, state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__THING:
        return getThing();
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__STATE:
        return getState();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__THING:
        setThing((String)newValue);
        return;
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__STATE:
        setState((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__THING:
        setThing(THING_EDEFAULT);
        return;
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__STATE:
        setState(STATE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__THING:
        return THING_EDEFAULT == null ? thing != null : !THING_EDEFAULT.equals(thing);
      case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER__STATE:
        return STATE_EDEFAULT == null ? state != null : !STATE_EDEFAULT.equals(state);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (thing: ");
    result.append(thing);
    result.append(", state: ");
    result.append(state);
    result.append(')');
    return result.toString();
  }

} //ThingStateUpdateEventTriggerImpl
