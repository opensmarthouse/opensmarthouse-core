/*
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.rule.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;
import org.openhab.core.model.script.services.ScriptGrammarAccess;

@Singleton
public class RulesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.RuleModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		//RuleModel:
		//	importSection=XImportSection?
		//	variables+=VariableDeclaration*
		//	rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//importSection=XImportSection? variables+=VariableDeclaration* rules+=Rule*
		public Group getGroup() { return cGroup; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }
		
		//variables+=VariableDeclaration*
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cWriteableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cWriteableVarKeyword_0_0_0 = (Keyword)cWriteableAssignment_0_0.eContents().get(0);
		private final Keyword cValKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0 = (RuleCall)cTypeAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0_1_0 = (RuleCall)cNameAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		////Import:
		////	'import' importedNamespace=QualifiedNameWithWildcard
		////;
		//VariableDeclaration:
		//	(writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//(writeable?='var' | 'val')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//writeable?='var'
		public Assignment getWriteableAssignment_0_0() { return cWriteableAssignment_0_0; }
		
		//'var'
		public Keyword getWriteableVarKeyword_0_0_0() { return cWriteableVarKeyword_0_0_0; }
		
		//'val'
		public Keyword getValKeyword_0_1() { return cValKeyword_0_1; }
		
		//(=> (type=JvmTypeReference name=ValidID) | name=ValidID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> (type=JvmTypeReference name=ValidID)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(type=JvmTypeReference name=ValidID)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0_0_0() { return cTypeAssignment_1_0_0_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_0_0_1() { return cNameAssignment_1_0_0_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0_1_0() { return cNameValidIDParserRuleCall_1_0_0_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }
		
		//('=' right=XExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//right=XExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }
		
		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_2_1_0() { return cRightXExpressionParserRuleCall_2_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventtriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventtriggerEventTriggerParserRuleCall_3_0 = (RuleCall)cEventtriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventtriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventtriggerEventTriggerParserRuleCall_4_1_0 = (RuleCall)cEventtriggerAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cScriptAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScriptScriptParserRuleCall_6_0 = (RuleCall)cScriptAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rule:
		//	'rule' name=(STRING | ID)
		//	'when' eventtrigger+=EventTrigger ('or' eventtrigger+=EventTrigger)*
		//	'then' script=Script
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=(STRING | ID) 'when' eventtrigger+=EventTrigger ('or' eventtrigger+=EventTrigger)* 'then' script=Script
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=(STRING | ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRING | ID)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_0() { return cNameSTRINGTerminalRuleCall_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1() { return cNameIDTerminalRuleCall_1_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }
		
		//eventtrigger+=EventTrigger
		public Assignment getEventtriggerAssignment_3() { return cEventtriggerAssignment_3; }
		
		//EventTrigger
		public RuleCall getEventtriggerEventTriggerParserRuleCall_3_0() { return cEventtriggerEventTriggerParserRuleCall_3_0; }
		
		//('or' eventtrigger+=EventTrigger)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'or'
		public Keyword getOrKeyword_4_0() { return cOrKeyword_4_0; }
		
		//eventtrigger+=EventTrigger
		public Assignment getEventtriggerAssignment_4_1() { return cEventtriggerAssignment_4_1; }
		
		//EventTrigger
		public RuleCall getEventtriggerEventTriggerParserRuleCall_4_1_0() { return cEventtriggerEventTriggerParserRuleCall_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//script=Script
		public Assignment getScriptAssignment_6() { return cScriptAssignment_6; }
		
		//Script
		public RuleCall getScriptScriptParserRuleCall_6_0() { return cScriptScriptParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class EventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.EventTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpdateEventTriggerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupMemberUpdateEventTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandEventTriggerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGroupMemberCommandEventTriggerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChangedEventTriggerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGroupMemberChangedEventTriggerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEventEmittedTriggerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTimerTriggerParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSystemTriggerParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cThingStateUpdateEventTriggerParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cThingStateChangedEventTriggerParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//EventTrigger:
		//	UpdateEventTrigger | GroupMemberUpdateEventTrigger | CommandEventTrigger | GroupMemberCommandEventTrigger |
		//	ChangedEventTrigger | GroupMemberChangedEventTrigger | EventEmittedTrigger | TimerTrigger | SystemTrigger |
		//	ThingStateUpdateEventTrigger | ThingStateChangedEventTrigger;
		@Override public ParserRule getRule() { return rule; }
		
		//UpdateEventTrigger | GroupMemberUpdateEventTrigger | CommandEventTrigger | GroupMemberCommandEventTrigger |
		//ChangedEventTrigger | GroupMemberChangedEventTrigger | EventEmittedTrigger | TimerTrigger | SystemTrigger |
		//ThingStateUpdateEventTrigger | ThingStateChangedEventTrigger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UpdateEventTrigger
		public RuleCall getUpdateEventTriggerParserRuleCall_0() { return cUpdateEventTriggerParserRuleCall_0; }
		
		//GroupMemberUpdateEventTrigger
		public RuleCall getGroupMemberUpdateEventTriggerParserRuleCall_1() { return cGroupMemberUpdateEventTriggerParserRuleCall_1; }
		
		//CommandEventTrigger
		public RuleCall getCommandEventTriggerParserRuleCall_2() { return cCommandEventTriggerParserRuleCall_2; }
		
		//GroupMemberCommandEventTrigger
		public RuleCall getGroupMemberCommandEventTriggerParserRuleCall_3() { return cGroupMemberCommandEventTriggerParserRuleCall_3; }
		
		//ChangedEventTrigger
		public RuleCall getChangedEventTriggerParserRuleCall_4() { return cChangedEventTriggerParserRuleCall_4; }
		
		//GroupMemberChangedEventTrigger
		public RuleCall getGroupMemberChangedEventTriggerParserRuleCall_5() { return cGroupMemberChangedEventTriggerParserRuleCall_5; }
		
		//EventEmittedTrigger
		public RuleCall getEventEmittedTriggerParserRuleCall_6() { return cEventEmittedTriggerParserRuleCall_6; }
		
		//TimerTrigger
		public RuleCall getTimerTriggerParserRuleCall_7() { return cTimerTriggerParserRuleCall_7; }
		
		//SystemTrigger
		public RuleCall getSystemTriggerParserRuleCall_8() { return cSystemTriggerParserRuleCall_8; }
		
		//ThingStateUpdateEventTrigger
		public RuleCall getThingStateUpdateEventTriggerParserRuleCall_9() { return cThingStateUpdateEventTriggerParserRuleCall_9; }
		
		//ThingStateChangedEventTrigger
		public RuleCall getThingStateChangedEventTriggerParserRuleCall_10() { return cThingStateChangedEventTriggerParserRuleCall_10; }
	}
	public class CommandEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.CommandEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cReceivedCommandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandValidCommandParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		
		//CommandEventTrigger:
		//	'Item' item=ItemName 'received command' command=ValidCommand?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Item' item=ItemName 'received command' command=ValidCommand?
		public Group getGroup() { return cGroup; }
		
		//'Item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }
		
		//item=ItemName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//ItemName
		public RuleCall getItemItemNameParserRuleCall_1_0() { return cItemItemNameParserRuleCall_1_0; }
		
		//'received command'
		public Keyword getReceivedCommandKeyword_2() { return cReceivedCommandKeyword_2; }
		
		//command=ValidCommand?
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//ValidCommand
		public RuleCall getCommandValidCommandParserRuleCall_3_0() { return cCommandValidCommandParserRuleCall_3_0; }
	}
	public class GroupMemberCommandEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.GroupMemberCommandEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemberOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupItemNameParserRuleCall_1_0 = (RuleCall)cGroupAssignment_1.eContents().get(0);
		private final Keyword cReceivedCommandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandValidCommandParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		
		//GroupMemberCommandEventTrigger:
		//	'Member of' group=ItemName 'received command' command=ValidCommand?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Member of' group=ItemName 'received command' command=ValidCommand?
		public Group getGroup() { return cGroup; }
		
		//'Member of'
		public Keyword getMemberOfKeyword_0() { return cMemberOfKeyword_0; }
		
		//group=ItemName
		public Assignment getGroupAssignment_1() { return cGroupAssignment_1; }
		
		//ItemName
		public RuleCall getGroupItemNameParserRuleCall_1_0() { return cGroupItemNameParserRuleCall_1_0; }
		
		//'received command'
		public Keyword getReceivedCommandKeyword_2() { return cReceivedCommandKeyword_2; }
		
		//command=ValidCommand?
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//ValidCommand
		public RuleCall getCommandValidCommandParserRuleCall_3_0() { return cCommandValidCommandParserRuleCall_3_0; }
	}
	public class UpdateEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.UpdateEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cReceivedUpdateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateValidStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//UpdateEventTrigger:
		//	'Item' item=ItemName 'received update' state=ValidState?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Item' item=ItemName 'received update' state=ValidState?
		public Group getGroup() { return cGroup; }
		
		//'Item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }
		
		//item=ItemName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//ItemName
		public RuleCall getItemItemNameParserRuleCall_1_0() { return cItemItemNameParserRuleCall_1_0; }
		
		//'received update'
		public Keyword getReceivedUpdateKeyword_2() { return cReceivedUpdateKeyword_2; }
		
		//state=ValidState?
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//ValidState
		public RuleCall getStateValidStateParserRuleCall_3_0() { return cStateValidStateParserRuleCall_3_0; }
	}
	public class GroupMemberUpdateEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.GroupMemberUpdateEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemberOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupItemNameParserRuleCall_1_0 = (RuleCall)cGroupAssignment_1.eContents().get(0);
		private final Keyword cReceivedUpdateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateValidStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//GroupMemberUpdateEventTrigger:
		//	'Member of' group=ItemName 'received update' state=ValidState?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Member of' group=ItemName 'received update' state=ValidState?
		public Group getGroup() { return cGroup; }
		
		//'Member of'
		public Keyword getMemberOfKeyword_0() { return cMemberOfKeyword_0; }
		
		//group=ItemName
		public Assignment getGroupAssignment_1() { return cGroupAssignment_1; }
		
		//ItemName
		public RuleCall getGroupItemNameParserRuleCall_1_0() { return cGroupItemNameParserRuleCall_1_0; }
		
		//'received update'
		public Keyword getReceivedUpdateKeyword_2() { return cReceivedUpdateKeyword_2; }
		
		//state=ValidState?
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//ValidState
		public RuleCall getStateValidStateParserRuleCall_3_0() { return cStateValidStateParserRuleCall_3_0; }
	}
	public class ChangedEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ChangedEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cChangedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOldStateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOldStateValidStateParserRuleCall_3_1_0 = (RuleCall)cOldStateAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNewStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNewStateValidStateParserRuleCall_4_1_0 = (RuleCall)cNewStateAssignment_4_1.eContents().get(0);
		
		//ChangedEventTrigger:
		//	'Item' item=ItemName 'changed' ('from' oldState=ValidState)? ('to' newState=ValidState)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Item' item=ItemName 'changed' ('from' oldState=ValidState)? ('to' newState=ValidState)?
		public Group getGroup() { return cGroup; }
		
		//'Item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }
		
		//item=ItemName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//ItemName
		public RuleCall getItemItemNameParserRuleCall_1_0() { return cItemItemNameParserRuleCall_1_0; }
		
		//'changed'
		public Keyword getChangedKeyword_2() { return cChangedKeyword_2; }
		
		//('from' oldState=ValidState)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'from'
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }
		
		//oldState=ValidState
		public Assignment getOldStateAssignment_3_1() { return cOldStateAssignment_3_1; }
		
		//ValidState
		public RuleCall getOldStateValidStateParserRuleCall_3_1_0() { return cOldStateValidStateParserRuleCall_3_1_0; }
		
		//('to' newState=ValidState)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'to'
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }
		
		//newState=ValidState
		public Assignment getNewStateAssignment_4_1() { return cNewStateAssignment_4_1; }
		
		//ValidState
		public RuleCall getNewStateValidStateParserRuleCall_4_1_0() { return cNewStateValidStateParserRuleCall_4_1_0; }
	}
	public class GroupMemberChangedEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.GroupMemberChangedEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemberOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupItemNameParserRuleCall_1_0 = (RuleCall)cGroupAssignment_1.eContents().get(0);
		private final Keyword cChangedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOldStateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOldStateValidStateParserRuleCall_3_1_0 = (RuleCall)cOldStateAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNewStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNewStateValidStateParserRuleCall_4_1_0 = (RuleCall)cNewStateAssignment_4_1.eContents().get(0);
		
		//GroupMemberChangedEventTrigger:
		//	'Member of' group=ItemName 'changed' ('from' oldState=ValidState)? ('to' newState=ValidState)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Member of' group=ItemName 'changed' ('from' oldState=ValidState)? ('to' newState=ValidState)?
		public Group getGroup() { return cGroup; }
		
		//'Member of'
		public Keyword getMemberOfKeyword_0() { return cMemberOfKeyword_0; }
		
		//group=ItemName
		public Assignment getGroupAssignment_1() { return cGroupAssignment_1; }
		
		//ItemName
		public RuleCall getGroupItemNameParserRuleCall_1_0() { return cGroupItemNameParserRuleCall_1_0; }
		
		//'changed'
		public Keyword getChangedKeyword_2() { return cChangedKeyword_2; }
		
		//('from' oldState=ValidState)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'from'
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }
		
		//oldState=ValidState
		public Assignment getOldStateAssignment_3_1() { return cOldStateAssignment_3_1; }
		
		//ValidState
		public RuleCall getOldStateValidStateParserRuleCall_3_1_0() { return cOldStateValidStateParserRuleCall_3_1_0; }
		
		//('to' newState=ValidState)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'to'
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }
		
		//newState=ValidState
		public Assignment getNewStateAssignment_4_1() { return cNewStateAssignment_4_1; }
		
		//ValidState
		public RuleCall getNewStateValidStateParserRuleCall_4_1_0() { return cNewStateValidStateParserRuleCall_4_1_0; }
	}
	public class EventEmittedTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.EventEmittedTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChannelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChannelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cChannelAlternatives_1_0 = (Alternatives)cChannelAssignment_1.eContents().get(0);
		private final RuleCall cChannelSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cChannelAlternatives_1_0.eContents().get(0);
		private final RuleCall cChannelIDTerminalRuleCall_1_0_1 = (RuleCall)cChannelAlternatives_1_0.eContents().get(1);
		private final Keyword cTriggeredKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerValidTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		
		//EventEmittedTrigger:
		//	'Channel' channel=(STRING | ID) 'triggered' trigger=ValidTrigger?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Channel' channel=(STRING | ID) 'triggered' trigger=ValidTrigger?
		public Group getGroup() { return cGroup; }
		
		//'Channel'
		public Keyword getChannelKeyword_0() { return cChannelKeyword_0; }
		
		//channel=(STRING | ID)
		public Assignment getChannelAssignment_1() { return cChannelAssignment_1; }
		
		//(STRING | ID)
		public Alternatives getChannelAlternatives_1_0() { return cChannelAlternatives_1_0; }
		
		//STRING
		public RuleCall getChannelSTRINGTerminalRuleCall_1_0_0() { return cChannelSTRINGTerminalRuleCall_1_0_0; }
		
		//ID
		public RuleCall getChannelIDTerminalRuleCall_1_0_1() { return cChannelIDTerminalRuleCall_1_0_1; }
		
		//'triggered'
		public Keyword getTriggeredKeyword_2() { return cTriggeredKeyword_2; }
		
		//trigger=ValidTrigger?
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//ValidTrigger
		public RuleCall getTriggerValidTriggerParserRuleCall_3_0() { return cTriggerValidTriggerParserRuleCall_3_0; }
	}
	public class TimerTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.TimerTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTimeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cCronKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCronAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCronSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cCronAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTimeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTimeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cTimeAlternatives_1_2_0 = (Alternatives)cTimeAssignment_1_2.eContents().get(0);
		private final Keyword cTimeMidnightKeyword_1_2_0_0 = (Keyword)cTimeAlternatives_1_2_0.eContents().get(0);
		private final Keyword cTimeNoonKeyword_1_2_0_1 = (Keyword)cTimeAlternatives_1_2_0.eContents().get(1);
		
		//TimerTrigger:
		//	'Time' 'cron' cron=STRING |
		//	'Time' 'is' time=('midnight' | 'noon');
		@Override public ParserRule getRule() { return rule; }
		
		//'Time' 'cron' cron=STRING | 'Time' 'is' time=('midnight' | 'noon')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Time' 'cron' cron=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'Time'
		public Keyword getTimeKeyword_0_0() { return cTimeKeyword_0_0; }
		
		//'cron'
		public Keyword getCronKeyword_0_1() { return cCronKeyword_0_1; }
		
		//cron=STRING
		public Assignment getCronAssignment_0_2() { return cCronAssignment_0_2; }
		
		//STRING
		public RuleCall getCronSTRINGTerminalRuleCall_0_2_0() { return cCronSTRINGTerminalRuleCall_0_2_0; }
		
		//'Time' 'is' time=('midnight' | 'noon')
		public Group getGroup_1() { return cGroup_1; }
		
		//'Time'
		public Keyword getTimeKeyword_1_0() { return cTimeKeyword_1_0; }
		
		//'is'
		public Keyword getIsKeyword_1_1() { return cIsKeyword_1_1; }
		
		//time=('midnight' | 'noon')
		public Assignment getTimeAssignment_1_2() { return cTimeAssignment_1_2; }
		
		//('midnight' | 'noon')
		public Alternatives getTimeAlternatives_1_2_0() { return cTimeAlternatives_1_2_0; }
		
		//'midnight'
		public Keyword getTimeMidnightKeyword_1_2_0_0() { return cTimeMidnightKeyword_1_2_0_0; }
		
		//'noon'
		public Keyword getTimeNoonKeyword_1_2_0_1() { return cTimeNoonKeyword_1_2_0_1; }
	}
	public class SystemTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.SystemTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemOnStartupTriggerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemOnShutdownTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemTrigger:
		//	SystemOnStartupTrigger | SystemOnShutdownTrigger;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemOnStartupTrigger | SystemOnShutdownTrigger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemOnStartupTrigger
		public RuleCall getSystemOnStartupTriggerParserRuleCall_0() { return cSystemOnStartupTriggerParserRuleCall_0; }
		
		//SystemOnShutdownTrigger
		public RuleCall getSystemOnShutdownTriggerParserRuleCall_1() { return cSystemOnShutdownTriggerParserRuleCall_1; }
	}
	public class SystemOnStartupTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.SystemOnStartupTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemOnStartupTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SystemOnStartupTrigger:
		//	{SystemOnStartupTrigger}
		//	'System' 'started';
		@Override public ParserRule getRule() { return rule; }
		
		//{SystemOnStartupTrigger} 'System' 'started'
		public Group getGroup() { return cGroup; }
		
		//{SystemOnStartupTrigger}
		public Action getSystemOnStartupTriggerAction_0() { return cSystemOnStartupTriggerAction_0; }
		
		//'System'
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
		
		//'started'
		public Keyword getStartedKeyword_2() { return cStartedKeyword_2; }
	}
	public class SystemOnShutdownTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.SystemOnShutdownTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemOnShutdownTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cShutsDownKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SystemOnShutdownTrigger:
		//	{SystemOnShutdownTrigger}
		//	'System' 'shuts down';
		@Override public ParserRule getRule() { return rule; }
		
		//{SystemOnShutdownTrigger} 'System' 'shuts down'
		public Group getGroup() { return cGroup; }
		
		//{SystemOnShutdownTrigger}
		public Action getSystemOnShutdownTriggerAction_0() { return cSystemOnShutdownTriggerAction_0; }
		
		//'System'
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
		
		//'shuts down'
		public Keyword getShutsDownKeyword_2() { return cShutsDownKeyword_2; }
	}
	public class ThingStateUpdateEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ThingStateUpdateEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThingSTRINGTerminalRuleCall_1_0 = (RuleCall)cThingAssignment_1.eContents().get(0);
		private final Keyword cReceivedUpdateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateThingValidStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//ThingStateUpdateEventTrigger:
		//	'Thing' thing=STRING 'received update' state=ThingValidState?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Thing' thing=STRING 'received update' state=ThingValidState?
		public Group getGroup() { return cGroup; }
		
		//'Thing'
		public Keyword getThingKeyword_0() { return cThingKeyword_0; }
		
		//thing=STRING
		public Assignment getThingAssignment_1() { return cThingAssignment_1; }
		
		//STRING
		public RuleCall getThingSTRINGTerminalRuleCall_1_0() { return cThingSTRINGTerminalRuleCall_1_0; }
		
		//'received update'
		public Keyword getReceivedUpdateKeyword_2() { return cReceivedUpdateKeyword_2; }
		
		//state=ThingValidState?
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//ThingValidState
		public RuleCall getStateThingValidStateParserRuleCall_3_0() { return cStateThingValidStateParserRuleCall_3_0; }
	}
	public class ThingStateChangedEventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ThingStateChangedEventTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThingSTRINGTerminalRuleCall_1_0 = (RuleCall)cThingAssignment_1.eContents().get(0);
		private final Keyword cChangedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOldStateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOldStateThingValidStateParserRuleCall_3_1_0 = (RuleCall)cOldStateAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNewStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNewStateThingValidStateParserRuleCall_4_1_0 = (RuleCall)cNewStateAssignment_4_1.eContents().get(0);
		
		//ThingStateChangedEventTrigger:
		//	'Thing' thing=STRING 'changed' ('from' oldState=ThingValidState)? ('to' newState=ThingValidState)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Thing' thing=STRING 'changed' ('from' oldState=ThingValidState)? ('to' newState=ThingValidState)?
		public Group getGroup() { return cGroup; }
		
		//'Thing'
		public Keyword getThingKeyword_0() { return cThingKeyword_0; }
		
		//thing=STRING
		public Assignment getThingAssignment_1() { return cThingAssignment_1; }
		
		//STRING
		public RuleCall getThingSTRINGTerminalRuleCall_1_0() { return cThingSTRINGTerminalRuleCall_1_0; }
		
		//'changed'
		public Keyword getChangedKeyword_2() { return cChangedKeyword_2; }
		
		//('from' oldState=ThingValidState)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'from'
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }
		
		//oldState=ThingValidState
		public Assignment getOldStateAssignment_3_1() { return cOldStateAssignment_3_1; }
		
		//ThingValidState
		public RuleCall getOldStateThingValidStateParserRuleCall_3_1_0() { return cOldStateThingValidStateParserRuleCall_3_1_0; }
		
		//('to' newState=ThingValidState)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'to'
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }
		
		//newState=ThingValidState
		public Assignment getNewStateAssignment_4_1() { return cNewStateAssignment_4_1; }
		
		//ThingValidState
		public RuleCall getNewStateThingValidStateParserRuleCall_4_1_0() { return cNewStateThingValidStateParserRuleCall_4_1_0; }
	}
	public class ItemNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ItemName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ItemName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class ValidStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidStateIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidStateNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidStateStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidState:
		//	ValidStateId | ValidStateNumber | ValidStateString;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidStateId | ValidStateNumber | ValidStateString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValidStateId
		public RuleCall getValidStateIdParserRuleCall_0() { return cValidStateIdParserRuleCall_0; }
		
		//ValidStateNumber
		public RuleCall getValidStateNumberParserRuleCall_1() { return cValidStateNumberParserRuleCall_1; }
		
		//ValidStateString
		public RuleCall getValidStateStringParserRuleCall_2() { return cValidStateStringParserRuleCall_2; }
	}
	public class ValidStateIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidStateId");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidStateId:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class ValidStateNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidStateNumber");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidStateNumber:
		//	value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}
	public class ValidStateStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidStateString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidStateString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ValidCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidCommandIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidCommandNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidCommandStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidCommand:
		//	ValidCommandId | ValidCommandNumber | ValidCommandString;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidCommandId | ValidCommandNumber | ValidCommandString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValidCommandId
		public RuleCall getValidCommandIdParserRuleCall_0() { return cValidCommandIdParserRuleCall_0; }
		
		//ValidCommandNumber
		public RuleCall getValidCommandNumberParserRuleCall_1() { return cValidCommandNumberParserRuleCall_1; }
		
		//ValidCommandString
		public RuleCall getValidCommandStringParserRuleCall_2() { return cValidCommandStringParserRuleCall_2; }
	}
	public class ValidCommandIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidCommandId");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidCommandId:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class ValidCommandNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidCommandNumber");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidCommandNumber:
		//	value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}
	public class ValidCommandStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidCommandString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidCommandString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ValidTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidTriggerIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidTriggerNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidTriggerStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidTrigger:
		//	ValidTriggerId | ValidTriggerNumber | ValidTriggerString;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidTriggerId | ValidTriggerNumber | ValidTriggerString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValidTriggerId
		public RuleCall getValidTriggerIdParserRuleCall_0() { return cValidTriggerIdParserRuleCall_0; }
		
		//ValidTriggerNumber
		public RuleCall getValidTriggerNumberParserRuleCall_1() { return cValidTriggerNumberParserRuleCall_1; }
		
		//ValidTriggerString
		public RuleCall getValidTriggerStringParserRuleCall_2() { return cValidTriggerStringParserRuleCall_2; }
	}
	public class ValidTriggerIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidTriggerId");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidTriggerId:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class ValidTriggerNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidTriggerNumber");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidTriggerNumber:
		//	value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}
	public class ValidTriggerStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ValidTriggerString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValidTriggerString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ThingValidStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.openhab.core.model.rule.Rules.ThingValidState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUNINITIALIZEDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINITIALIZINGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUNKNOWNKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cONLINEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOFFLINEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cREMOVINGKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cREMOVEDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//ThingValidState:
		//	'UNINITIALIZED' |
		//	'INITIALIZING' |
		//	'UNKNOWN' |
		//	'ONLINE' |
		//	'OFFLINE' |
		//	'REMOVING' |
		//	'REMOVED';
		@Override public ParserRule getRule() { return rule; }
		
		//'UNINITIALIZED' | 'INITIALIZING' | 'UNKNOWN' | 'ONLINE' | 'OFFLINE' | 'REMOVING' | 'REMOVED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'UNINITIALIZED'
		public Keyword getUNINITIALIZEDKeyword_0() { return cUNINITIALIZEDKeyword_0; }
		
		//'INITIALIZING'
		public Keyword getINITIALIZINGKeyword_1() { return cINITIALIZINGKeyword_1; }
		
		//'UNKNOWN'
		public Keyword getUNKNOWNKeyword_2() { return cUNKNOWNKeyword_2; }
		
		//'ONLINE'
		public Keyword getONLINEKeyword_3() { return cONLINEKeyword_3; }
		
		//'OFFLINE'
		public Keyword getOFFLINEKeyword_4() { return cOFFLINEKeyword_4; }
		
		//'REMOVING'
		public Keyword getREMOVINGKeyword_5() { return cREMOVINGKeyword_5; }
		
		//'REMOVED'
		public Keyword getREMOVEDKeyword_6() { return cREMOVEDKeyword_6; }
	}
	
	
	private final RuleModelElements pRuleModel;
	private final VariableDeclarationElements pVariableDeclaration;
	private final RuleElements pRule;
	private final EventTriggerElements pEventTrigger;
	private final CommandEventTriggerElements pCommandEventTrigger;
	private final GroupMemberCommandEventTriggerElements pGroupMemberCommandEventTrigger;
	private final UpdateEventTriggerElements pUpdateEventTrigger;
	private final GroupMemberUpdateEventTriggerElements pGroupMemberUpdateEventTrigger;
	private final ChangedEventTriggerElements pChangedEventTrigger;
	private final GroupMemberChangedEventTriggerElements pGroupMemberChangedEventTrigger;
	private final EventEmittedTriggerElements pEventEmittedTrigger;
	private final TimerTriggerElements pTimerTrigger;
	private final SystemTriggerElements pSystemTrigger;
	private final SystemOnStartupTriggerElements pSystemOnStartupTrigger;
	private final SystemOnShutdownTriggerElements pSystemOnShutdownTrigger;
	private final ThingStateUpdateEventTriggerElements pThingStateUpdateEventTrigger;
	private final ThingStateChangedEventTriggerElements pThingStateChangedEventTrigger;
	private final ItemNameElements pItemName;
	private final ValidStateElements pValidState;
	private final ValidStateIdElements pValidStateId;
	private final ValidStateNumberElements pValidStateNumber;
	private final ValidStateStringElements pValidStateString;
	private final ValidCommandElements pValidCommand;
	private final ValidCommandIdElements pValidCommandId;
	private final ValidCommandNumberElements pValidCommandNumber;
	private final ValidCommandStringElements pValidCommandString;
	private final ValidTriggerElements pValidTrigger;
	private final ValidTriggerIdElements pValidTriggerId;
	private final ValidTriggerNumberElements pValidTriggerNumber;
	private final ValidTriggerStringElements pValidTriggerString;
	private final ThingValidStateElements pThingValidState;
	
	private final Grammar grammar;
	
	private final ScriptGrammarAccess gaScript;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public RulesGrammarAccess(GrammarProvider grammarProvider,
			ScriptGrammarAccess gaScript,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaScript = gaScript;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pRuleModel = new RuleModelElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pRule = new RuleElements();
		this.pEventTrigger = new EventTriggerElements();
		this.pCommandEventTrigger = new CommandEventTriggerElements();
		this.pGroupMemberCommandEventTrigger = new GroupMemberCommandEventTriggerElements();
		this.pUpdateEventTrigger = new UpdateEventTriggerElements();
		this.pGroupMemberUpdateEventTrigger = new GroupMemberUpdateEventTriggerElements();
		this.pChangedEventTrigger = new ChangedEventTriggerElements();
		this.pGroupMemberChangedEventTrigger = new GroupMemberChangedEventTriggerElements();
		this.pEventEmittedTrigger = new EventEmittedTriggerElements();
		this.pTimerTrigger = new TimerTriggerElements();
		this.pSystemTrigger = new SystemTriggerElements();
		this.pSystemOnStartupTrigger = new SystemOnStartupTriggerElements();
		this.pSystemOnShutdownTrigger = new SystemOnShutdownTriggerElements();
		this.pThingStateUpdateEventTrigger = new ThingStateUpdateEventTriggerElements();
		this.pThingStateChangedEventTrigger = new ThingStateChangedEventTriggerElements();
		this.pItemName = new ItemNameElements();
		this.pValidState = new ValidStateElements();
		this.pValidStateId = new ValidStateIdElements();
		this.pValidStateNumber = new ValidStateNumberElements();
		this.pValidStateString = new ValidStateStringElements();
		this.pValidCommand = new ValidCommandElements();
		this.pValidCommandId = new ValidCommandIdElements();
		this.pValidCommandNumber = new ValidCommandNumberElements();
		this.pValidCommandString = new ValidCommandStringElements();
		this.pValidTrigger = new ValidTriggerElements();
		this.pValidTriggerId = new ValidTriggerIdElements();
		this.pValidTriggerNumber = new ValidTriggerNumberElements();
		this.pValidTriggerString = new ValidTriggerStringElements();
		this.pThingValidState = new ThingValidStateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.openhab.core.model.rule.Rules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ScriptGrammarAccess getScriptGrammarAccess() {
		return gaScript;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//RuleModel:
	//	importSection=XImportSection?
	//	variables+=VariableDeclaration*
	//	rules+=Rule*;
	public RuleModelElements getRuleModelAccess() {
		return pRuleModel;
	}
	
	public ParserRule getRuleModelRule() {
		return getRuleModelAccess().getRule();
	}
	
	////Import:
	////	'import' importedNamespace=QualifiedNameWithWildcard
	////;
	//VariableDeclaration:
	//	(writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Rule:
	//	'rule' name=(STRING | ID)
	//	'when' eventtrigger+=EventTrigger ('or' eventtrigger+=EventTrigger)*
	//	'then' script=Script
	//	'end';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//EventTrigger:
	//	UpdateEventTrigger | GroupMemberUpdateEventTrigger | CommandEventTrigger | GroupMemberCommandEventTrigger |
	//	ChangedEventTrigger | GroupMemberChangedEventTrigger | EventEmittedTrigger | TimerTrigger | SystemTrigger |
	//	ThingStateUpdateEventTrigger | ThingStateChangedEventTrigger;
	public EventTriggerElements getEventTriggerAccess() {
		return pEventTrigger;
	}
	
	public ParserRule getEventTriggerRule() {
		return getEventTriggerAccess().getRule();
	}
	
	//CommandEventTrigger:
	//	'Item' item=ItemName 'received command' command=ValidCommand?;
	public CommandEventTriggerElements getCommandEventTriggerAccess() {
		return pCommandEventTrigger;
	}
	
	public ParserRule getCommandEventTriggerRule() {
		return getCommandEventTriggerAccess().getRule();
	}
	
	//GroupMemberCommandEventTrigger:
	//	'Member of' group=ItemName 'received command' command=ValidCommand?;
	public GroupMemberCommandEventTriggerElements getGroupMemberCommandEventTriggerAccess() {
		return pGroupMemberCommandEventTrigger;
	}
	
	public ParserRule getGroupMemberCommandEventTriggerRule() {
		return getGroupMemberCommandEventTriggerAccess().getRule();
	}
	
	//UpdateEventTrigger:
	//	'Item' item=ItemName 'received update' state=ValidState?;
	public UpdateEventTriggerElements getUpdateEventTriggerAccess() {
		return pUpdateEventTrigger;
	}
	
	public ParserRule getUpdateEventTriggerRule() {
		return getUpdateEventTriggerAccess().getRule();
	}
	
	//GroupMemberUpdateEventTrigger:
	//	'Member of' group=ItemName 'received update' state=ValidState?;
	public GroupMemberUpdateEventTriggerElements getGroupMemberUpdateEventTriggerAccess() {
		return pGroupMemberUpdateEventTrigger;
	}
	
	public ParserRule getGroupMemberUpdateEventTriggerRule() {
		return getGroupMemberUpdateEventTriggerAccess().getRule();
	}
	
	//ChangedEventTrigger:
	//	'Item' item=ItemName 'changed' ('from' oldState=ValidState)? ('to' newState=ValidState)?;
	public ChangedEventTriggerElements getChangedEventTriggerAccess() {
		return pChangedEventTrigger;
	}
	
	public ParserRule getChangedEventTriggerRule() {
		return getChangedEventTriggerAccess().getRule();
	}
	
	//GroupMemberChangedEventTrigger:
	//	'Member of' group=ItemName 'changed' ('from' oldState=ValidState)? ('to' newState=ValidState)?;
	public GroupMemberChangedEventTriggerElements getGroupMemberChangedEventTriggerAccess() {
		return pGroupMemberChangedEventTrigger;
	}
	
	public ParserRule getGroupMemberChangedEventTriggerRule() {
		return getGroupMemberChangedEventTriggerAccess().getRule();
	}
	
	//EventEmittedTrigger:
	//	'Channel' channel=(STRING | ID) 'triggered' trigger=ValidTrigger?;
	public EventEmittedTriggerElements getEventEmittedTriggerAccess() {
		return pEventEmittedTrigger;
	}
	
	public ParserRule getEventEmittedTriggerRule() {
		return getEventEmittedTriggerAccess().getRule();
	}
	
	//TimerTrigger:
	//	'Time' 'cron' cron=STRING |
	//	'Time' 'is' time=('midnight' | 'noon');
	public TimerTriggerElements getTimerTriggerAccess() {
		return pTimerTrigger;
	}
	
	public ParserRule getTimerTriggerRule() {
		return getTimerTriggerAccess().getRule();
	}
	
	//SystemTrigger:
	//	SystemOnStartupTrigger | SystemOnShutdownTrigger;
	public SystemTriggerElements getSystemTriggerAccess() {
		return pSystemTrigger;
	}
	
	public ParserRule getSystemTriggerRule() {
		return getSystemTriggerAccess().getRule();
	}
	
	//SystemOnStartupTrigger:
	//	{SystemOnStartupTrigger}
	//	'System' 'started';
	public SystemOnStartupTriggerElements getSystemOnStartupTriggerAccess() {
		return pSystemOnStartupTrigger;
	}
	
	public ParserRule getSystemOnStartupTriggerRule() {
		return getSystemOnStartupTriggerAccess().getRule();
	}
	
	//SystemOnShutdownTrigger:
	//	{SystemOnShutdownTrigger}
	//	'System' 'shuts down';
	public SystemOnShutdownTriggerElements getSystemOnShutdownTriggerAccess() {
		return pSystemOnShutdownTrigger;
	}
	
	public ParserRule getSystemOnShutdownTriggerRule() {
		return getSystemOnShutdownTriggerAccess().getRule();
	}
	
	//ThingStateUpdateEventTrigger:
	//	'Thing' thing=STRING 'received update' state=ThingValidState?;
	public ThingStateUpdateEventTriggerElements getThingStateUpdateEventTriggerAccess() {
		return pThingStateUpdateEventTrigger;
	}
	
	public ParserRule getThingStateUpdateEventTriggerRule() {
		return getThingStateUpdateEventTriggerAccess().getRule();
	}
	
	//ThingStateChangedEventTrigger:
	//	'Thing' thing=STRING 'changed' ('from' oldState=ThingValidState)? ('to' newState=ThingValidState)?;
	public ThingStateChangedEventTriggerElements getThingStateChangedEventTriggerAccess() {
		return pThingStateChangedEventTrigger;
	}
	
	public ParserRule getThingStateChangedEventTriggerRule() {
		return getThingStateChangedEventTriggerAccess().getRule();
	}
	
	//ItemName:
	//	ID;
	public ItemNameElements getItemNameAccess() {
		return pItemName;
	}
	
	public ParserRule getItemNameRule() {
		return getItemNameAccess().getRule();
	}
	
	//ValidState:
	//	ValidStateId | ValidStateNumber | ValidStateString;
	public ValidStateElements getValidStateAccess() {
		return pValidState;
	}
	
	public ParserRule getValidStateRule() {
		return getValidStateAccess().getRule();
	}
	
	//ValidStateId:
	//	value=ID;
	public ValidStateIdElements getValidStateIdAccess() {
		return pValidStateId;
	}
	
	public ParserRule getValidStateIdRule() {
		return getValidStateIdAccess().getRule();
	}
	
	//ValidStateNumber:
	//	value=Number;
	public ValidStateNumberElements getValidStateNumberAccess() {
		return pValidStateNumber;
	}
	
	public ParserRule getValidStateNumberRule() {
		return getValidStateNumberAccess().getRule();
	}
	
	//ValidStateString:
	//	value=STRING;
	public ValidStateStringElements getValidStateStringAccess() {
		return pValidStateString;
	}
	
	public ParserRule getValidStateStringRule() {
		return getValidStateStringAccess().getRule();
	}
	
	//ValidCommand:
	//	ValidCommandId | ValidCommandNumber | ValidCommandString;
	public ValidCommandElements getValidCommandAccess() {
		return pValidCommand;
	}
	
	public ParserRule getValidCommandRule() {
		return getValidCommandAccess().getRule();
	}
	
	//ValidCommandId:
	//	value=ID;
	public ValidCommandIdElements getValidCommandIdAccess() {
		return pValidCommandId;
	}
	
	public ParserRule getValidCommandIdRule() {
		return getValidCommandIdAccess().getRule();
	}
	
	//ValidCommandNumber:
	//	value=Number;
	public ValidCommandNumberElements getValidCommandNumberAccess() {
		return pValidCommandNumber;
	}
	
	public ParserRule getValidCommandNumberRule() {
		return getValidCommandNumberAccess().getRule();
	}
	
	//ValidCommandString:
	//	value=STRING;
	public ValidCommandStringElements getValidCommandStringAccess() {
		return pValidCommandString;
	}
	
	public ParserRule getValidCommandStringRule() {
		return getValidCommandStringAccess().getRule();
	}
	
	//ValidTrigger:
	//	ValidTriggerId | ValidTriggerNumber | ValidTriggerString;
	public ValidTriggerElements getValidTriggerAccess() {
		return pValidTrigger;
	}
	
	public ParserRule getValidTriggerRule() {
		return getValidTriggerAccess().getRule();
	}
	
	//ValidTriggerId:
	//	value=ID;
	public ValidTriggerIdElements getValidTriggerIdAccess() {
		return pValidTriggerId;
	}
	
	public ParserRule getValidTriggerIdRule() {
		return getValidTriggerIdAccess().getRule();
	}
	
	//ValidTriggerNumber:
	//	value=Number;
	public ValidTriggerNumberElements getValidTriggerNumberAccess() {
		return pValidTriggerNumber;
	}
	
	public ParserRule getValidTriggerNumberRule() {
		return getValidTriggerNumberAccess().getRule();
	}
	
	//ValidTriggerString:
	//	value=STRING;
	public ValidTriggerStringElements getValidTriggerStringAccess() {
		return pValidTriggerString;
	}
	
	public ParserRule getValidTriggerStringRule() {
		return getValidTriggerStringAccess().getRule();
	}
	
	//ThingValidState:
	//	'UNINITIALIZED' |
	//	'INITIALIZING' |
	//	'UNKNOWN' |
	//	'ONLINE' |
	//	'OFFLINE' |
	//	'REMOVING' |
	//	'REMOVED';
	public ThingValidStateElements getThingValidStateAccess() {
		return pThingValidState;
	}
	
	public ParserRule getThingValidStateRule() {
		return getThingValidStateAccess().getRule();
	}
	
	//Script XBlockExpression:
	//	{Script} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public ScriptGrammarAccess.ScriptElements getScriptAccess() {
		return gaScript.getScriptAccess();
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//@Override
	//XLiteral XExpression:
	//	XClosure | XBooleanLiteral | XNullLiteral | XStringLiteral | XNumberLiteral | XTypeLiteral | QuantityLiteral;
	public ScriptGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaScript.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//QuantityLiteral XExpression:
	//	{QuantityLiteral} value=Number '|' unit=AbstractUnit;
	public ScriptGrammarAccess.QuantityLiteralElements getQuantityLiteralAccess() {
		return gaScript.getQuantityLiteralAccess();
	}
	
	public ParserRule getQuantityLiteralRule() {
		return getQuantityLiteralAccess().getRule();
	}
	
	//AbstractUnit:
	//	StringUnit | IDUnit | SpecificUnit;
	public ScriptGrammarAccess.AbstractUnitElements getAbstractUnitAccess() {
		return gaScript.getAbstractUnitAccess();
	}
	
	public ParserRule getAbstractUnitRule() {
		return getAbstractUnitAccess().getRule();
	}
	
	//StringUnit:
	//	value=STRING;
	public ScriptGrammarAccess.StringUnitElements getStringUnitAccess() {
		return gaScript.getStringUnitAccess();
	}
	
	public ParserRule getStringUnitRule() {
		return getStringUnitAccess().getRule();
	}
	
	//IDUnit:
	//	value=ID;
	public ScriptGrammarAccess.IDUnitElements getIDUnitAccess() {
		return gaScript.getIDUnitAccess();
	}
	
	public ParserRule getIDUnitRule() {
		return getIDUnitAccess().getRule();
	}
	
	//SpecificUnit:
	//	value=COMMON_UNIT_SYMBOLS;
	public ScriptGrammarAccess.SpecificUnitElements getSpecificUnitAccess() {
		return gaScript.getSpecificUnitAccess();
	}
	
	public ParserRule getSpecificUnitRule() {
		return getSpecificUnitAccess().getRule();
	}
	
	//COMMON_UNIT_SYMBOLS:
	//	'°C' | '°F' | 'Ω' | '℃' | '°' | '%' | 'm²' | 'm³';
	public ScriptGrammarAccess.COMMON_UNIT_SYMBOLSElements getCOMMON_UNIT_SYMBOLSAccess() {
		return gaScript.getCOMMON_UNIT_SYMBOLSAccess();
	}
	
	public ParserRule getCOMMON_UNIT_SYMBOLSRule() {
		return getCOMMON_UNIT_SYMBOLSAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | super::XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
