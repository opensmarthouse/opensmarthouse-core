/*
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.rule.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import org.openhab.core.model.rule.rules.ChangedEventTrigger;
import org.openhab.core.model.rule.rules.CommandEventTrigger;
import org.openhab.core.model.rule.rules.EventEmittedTrigger;
import org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigger;
import org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigger;
import org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigger;
import org.openhab.core.model.rule.rules.Rule;
import org.openhab.core.model.rule.rules.RuleModel;
import org.openhab.core.model.rule.rules.RulesPackage;
import org.openhab.core.model.rule.rules.SystemOnShutdownTrigger;
import org.openhab.core.model.rule.rules.SystemOnStartupTrigger;
import org.openhab.core.model.rule.rules.ThingStateChangedEventTrigger;
import org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger;
import org.openhab.core.model.rule.rules.TimerTrigger;
import org.openhab.core.model.rule.rules.UpdateEventTrigger;
import org.openhab.core.model.rule.rules.ValidCommandId;
import org.openhab.core.model.rule.rules.ValidCommandNumber;
import org.openhab.core.model.rule.rules.ValidCommandString;
import org.openhab.core.model.rule.rules.ValidStateId;
import org.openhab.core.model.rule.rules.ValidStateNumber;
import org.openhab.core.model.rule.rules.ValidStateString;
import org.openhab.core.model.rule.rules.ValidTriggerId;
import org.openhab.core.model.rule.rules.ValidTriggerNumber;
import org.openhab.core.model.rule.rules.ValidTriggerString;
import org.openhab.core.model.rule.rules.VariableDeclaration;
import org.openhab.core.model.rule.services.RulesGrammarAccess;
import org.openhab.core.model.script.script.IDUnit;
import org.openhab.core.model.script.script.QuantityLiteral;
import org.openhab.core.model.script.script.Script;
import org.openhab.core.model.script.script.ScriptPackage;
import org.openhab.core.model.script.script.SpecificUnit;
import org.openhab.core.model.script.script.StringUnit;
import org.openhab.core.model.script.serializer.ScriptSemanticSequencer;

@SuppressWarnings("all")
public abstract class AbstractRulesSemanticSequencer extends ScriptSemanticSequencer {

	@Inject
	private RulesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RulesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RulesPackage.CHANGED_EVENT_TRIGGER:
				sequence_ChangedEventTrigger(context, (ChangedEventTrigger) semanticObject); 
				return; 
			case RulesPackage.COMMAND_EVENT_TRIGGER:
				sequence_CommandEventTrigger(context, (CommandEventTrigger) semanticObject); 
				return; 
			case RulesPackage.EVENT_EMITTED_TRIGGER:
				sequence_EventEmittedTrigger(context, (EventEmittedTrigger) semanticObject); 
				return; 
			case RulesPackage.GROUP_MEMBER_CHANGED_EVENT_TRIGGER:
				sequence_GroupMemberChangedEventTrigger(context, (GroupMemberChangedEventTrigger) semanticObject); 
				return; 
			case RulesPackage.GROUP_MEMBER_COMMAND_EVENT_TRIGGER:
				sequence_GroupMemberCommandEventTrigger(context, (GroupMemberCommandEventTrigger) semanticObject); 
				return; 
			case RulesPackage.GROUP_MEMBER_UPDATE_EVENT_TRIGGER:
				sequence_GroupMemberUpdateEventTrigger(context, (GroupMemberUpdateEventTrigger) semanticObject); 
				return; 
			case RulesPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case RulesPackage.RULE_MODEL:
				sequence_RuleModel(context, (RuleModel) semanticObject); 
				return; 
			case RulesPackage.SYSTEM_ON_SHUTDOWN_TRIGGER:
				sequence_SystemOnShutdownTrigger(context, (SystemOnShutdownTrigger) semanticObject); 
				return; 
			case RulesPackage.SYSTEM_ON_STARTUP_TRIGGER:
				sequence_SystemOnStartupTrigger(context, (SystemOnStartupTrigger) semanticObject); 
				return; 
			case RulesPackage.THING_STATE_CHANGED_EVENT_TRIGGER:
				sequence_ThingStateChangedEventTrigger(context, (ThingStateChangedEventTrigger) semanticObject); 
				return; 
			case RulesPackage.THING_STATE_UPDATE_EVENT_TRIGGER:
				sequence_ThingStateUpdateEventTrigger(context, (ThingStateUpdateEventTrigger) semanticObject); 
				return; 
			case RulesPackage.TIMER_TRIGGER:
				sequence_TimerTrigger(context, (TimerTrigger) semanticObject); 
				return; 
			case RulesPackage.UPDATE_EVENT_TRIGGER:
				sequence_UpdateEventTrigger(context, (UpdateEventTrigger) semanticObject); 
				return; 
			case RulesPackage.VALID_COMMAND_ID:
				sequence_ValidCommandId(context, (ValidCommandId) semanticObject); 
				return; 
			case RulesPackage.VALID_COMMAND_NUMBER:
				sequence_ValidCommandNumber(context, (ValidCommandNumber) semanticObject); 
				return; 
			case RulesPackage.VALID_COMMAND_STRING:
				sequence_ValidCommandString(context, (ValidCommandString) semanticObject); 
				return; 
			case RulesPackage.VALID_STATE_ID:
				sequence_ValidStateId(context, (ValidStateId) semanticObject); 
				return; 
			case RulesPackage.VALID_STATE_NUMBER:
				sequence_ValidStateNumber(context, (ValidStateNumber) semanticObject); 
				return; 
			case RulesPackage.VALID_STATE_STRING:
				sequence_ValidStateString(context, (ValidStateString) semanticObject); 
				return; 
			case RulesPackage.VALID_TRIGGER_ID:
				sequence_ValidTriggerId(context, (ValidTriggerId) semanticObject); 
				return; 
			case RulesPackage.VALID_TRIGGER_NUMBER:
				sequence_ValidTriggerNumber(context, (ValidTriggerNumber) semanticObject); 
				return; 
			case RulesPackage.VALID_TRIGGER_STRING:
				sequence_ValidTriggerString(context, (ValidTriggerString) semanticObject); 
				return; 
			case RulesPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		else if (epackage == ScriptPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ScriptPackage.ID_UNIT:
				sequence_IDUnit(context, (IDUnit) semanticObject); 
				return; 
			case ScriptPackage.QUANTITY_LITERAL:
				sequence_QuantityLiteral(context, (QuantityLiteral) semanticObject); 
				return; 
			case ScriptPackage.SCRIPT:
				sequence_Script(context, (Script) semanticObject); 
				return; 
			case ScriptPackage.SPECIFIC_UNIT:
				sequence_SpecificUnit(context, (SpecificUnit) semanticObject); 
				return; 
			case ScriptPackage.STRING_UNIT:
				sequence_StringUnit(context, (StringUnit) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EventTrigger returns ChangedEventTrigger
	 *     ChangedEventTrigger returns ChangedEventTrigger
	 *
	 * Constraint:
	 *     (item=ItemName oldState=ValidState? newState=ValidState?)
	 */
	protected void sequence_ChangedEventTrigger(ISerializationContext context, ChangedEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns CommandEventTrigger
	 *     CommandEventTrigger returns CommandEventTrigger
	 *
	 * Constraint:
	 *     (item=ItemName command=ValidCommand?)
	 */
	protected void sequence_CommandEventTrigger(ISerializationContext context, CommandEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns EventEmittedTrigger
	 *     EventEmittedTrigger returns EventEmittedTrigger
	 *
	 * Constraint:
	 *     ((channel=STRING | channel=ID) trigger=ValidTrigger?)
	 */
	protected void sequence_EventEmittedTrigger(ISerializationContext context, EventEmittedTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns GroupMemberChangedEventTrigger
	 *     GroupMemberChangedEventTrigger returns GroupMemberChangedEventTrigger
	 *
	 * Constraint:
	 *     (group=ItemName oldState=ValidState? newState=ValidState?)
	 */
	protected void sequence_GroupMemberChangedEventTrigger(ISerializationContext context, GroupMemberChangedEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns GroupMemberCommandEventTrigger
	 *     GroupMemberCommandEventTrigger returns GroupMemberCommandEventTrigger
	 *
	 * Constraint:
	 *     (group=ItemName command=ValidCommand?)
	 */
	protected void sequence_GroupMemberCommandEventTrigger(ISerializationContext context, GroupMemberCommandEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns GroupMemberUpdateEventTrigger
	 *     GroupMemberUpdateEventTrigger returns GroupMemberUpdateEventTrigger
	 *
	 * Constraint:
	 *     (group=ItemName state=ValidState?)
	 */
	protected void sequence_GroupMemberUpdateEventTrigger(ISerializationContext context, GroupMemberUpdateEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleModel returns RuleModel
	 *
	 * Constraint:
	 *     ((importSection=XImportSection? variables+=VariableDeclaration+ rules+=Rule+) | (importSection=XImportSection? rules+=Rule+) | rules+=Rule+)?
	 */
	protected void sequence_RuleModel(ISerializationContext context, RuleModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     ((name=STRING | name=ID) eventtrigger+=EventTrigger eventtrigger+=EventTrigger* script=Script)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns SystemOnShutdownTrigger
	 *     SystemTrigger returns SystemOnShutdownTrigger
	 *     SystemOnShutdownTrigger returns SystemOnShutdownTrigger
	 *
	 * Constraint:
	 *     {SystemOnShutdownTrigger}
	 */
	protected void sequence_SystemOnShutdownTrigger(ISerializationContext context, SystemOnShutdownTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns SystemOnStartupTrigger
	 *     SystemTrigger returns SystemOnStartupTrigger
	 *     SystemOnStartupTrigger returns SystemOnStartupTrigger
	 *
	 * Constraint:
	 *     {SystemOnStartupTrigger}
	 */
	protected void sequence_SystemOnStartupTrigger(ISerializationContext context, SystemOnStartupTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns ThingStateChangedEventTrigger
	 *     ThingStateChangedEventTrigger returns ThingStateChangedEventTrigger
	 *
	 * Constraint:
	 *     (thing=STRING oldState=ThingValidState? newState=ThingValidState?)
	 */
	protected void sequence_ThingStateChangedEventTrigger(ISerializationContext context, ThingStateChangedEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns ThingStateUpdateEventTrigger
	 *     ThingStateUpdateEventTrigger returns ThingStateUpdateEventTrigger
	 *
	 * Constraint:
	 *     (thing=STRING state=ThingValidState?)
	 */
	protected void sequence_ThingStateUpdateEventTrigger(ISerializationContext context, ThingStateUpdateEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns TimerTrigger
	 *     TimerTrigger returns TimerTrigger
	 *
	 * Constraint:
	 *     (cron=STRING | time='midnight' | time='noon')
	 */
	protected void sequence_TimerTrigger(ISerializationContext context, TimerTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventTrigger returns UpdateEventTrigger
	 *     UpdateEventTrigger returns UpdateEventTrigger
	 *
	 * Constraint:
	 *     (item=ItemName state=ValidState?)
	 */
	protected void sequence_UpdateEventTrigger(ISerializationContext context, UpdateEventTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValidCommand returns ValidCommandId
	 *     ValidCommandId returns ValidCommandId
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_ValidCommandId(ISerializationContext context, ValidCommandId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidCommandIdAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidCommand returns ValidCommandNumber
	 *     ValidCommandNumber returns ValidCommandNumber
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_ValidCommandNumber(ISerializationContext context, ValidCommandNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidCommandNumberAccess().getValueNumberParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidCommand returns ValidCommandString
	 *     ValidCommandString returns ValidCommandString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ValidCommandString(ISerializationContext context, ValidCommandString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidCommandStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidState returns ValidStateId
	 *     ValidStateId returns ValidStateId
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_ValidStateId(ISerializationContext context, ValidStateId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_STATE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_STATE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidStateIdAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidState returns ValidStateNumber
	 *     ValidStateNumber returns ValidStateNumber
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_ValidStateNumber(ISerializationContext context, ValidStateNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_STATE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_STATE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidStateNumberAccess().getValueNumberParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidState returns ValidStateString
	 *     ValidStateString returns ValidStateString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ValidStateString(ISerializationContext context, ValidStateString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_STATE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_STATE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidStateStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidTrigger returns ValidTriggerId
	 *     ValidTriggerId returns ValidTriggerId
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_ValidTriggerId(ISerializationContext context, ValidTriggerId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_TRIGGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_TRIGGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidTriggerIdAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidTrigger returns ValidTriggerNumber
	 *     ValidTriggerNumber returns ValidTriggerNumber
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_ValidTriggerNumber(ISerializationContext context, ValidTriggerNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_TRIGGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_TRIGGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidTriggerNumberAccess().getValueNumberParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidTrigger returns ValidTriggerString
	 *     ValidTriggerString returns ValidTriggerString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ValidTriggerString(ISerializationContext context, ValidTriggerString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RulesPackage.Literals.VALID_TRIGGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RulesPackage.Literals.VALID_TRIGGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidTriggerStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (writeable?='var'? ((type=JvmTypeReference name=ValidID) | name=ValidID) right=XExpression?)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
