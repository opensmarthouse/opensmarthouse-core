/*
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.persistence.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.openhab.core.model.persistence.services.PersistenceGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractPersistenceSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PersistenceGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PersistenceConfiguration_ColonKeyword_3_0_0_or_SemicolonKeyword_3_1;
	protected AbstractElementAlias match_PersistenceModel___FiltersKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q;
	protected AbstractElementAlias match_PersistenceModel___ItemsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PersistenceGrammarAccess) access;
		match_PersistenceConfiguration_ColonKeyword_3_0_0_or_SemicolonKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPersistenceConfigurationAccess().getColonKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getPersistenceConfigurationAccess().getSemicolonKeyword_3_1()));
		match_PersistenceModel___FiltersKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPersistenceModelAccess().getFiltersKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getPersistenceModelAccess().getLeftCurlyBracketKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getPersistenceModelAccess().getRightCurlyBracketKeyword_6_3()));
		match_PersistenceModel___ItemsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPersistenceModelAccess().getItemsKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getPersistenceModelAccess().getLeftCurlyBracketKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getPersistenceModelAccess().getRightCurlyBracketKeyword_7_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PersistenceConfiguration_ColonKeyword_3_0_0_or_SemicolonKeyword_3_1.equals(syntax))
				emit_PersistenceConfiguration_ColonKeyword_3_0_0_or_SemicolonKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PersistenceModel___FiltersKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q.equals(syntax))
				emit_PersistenceModel___FiltersKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PersistenceModel___ItemsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q.equals(syntax))
				emit_PersistenceModel___ItemsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ':' | ';'
	 *
	 * This ambiguous syntax occurs at:
	 *     alias=STRING (ambiguity) (rule end)
	 *     items+=AllConfig (ambiguity) (rule end)
	 *     items+=GroupConfig (ambiguity) (rule end)
	 *     items+=ItemConfig (ambiguity) (rule end)
	 */
	protected void emit_PersistenceConfiguration_ColonKeyword_3_0_0_or_SemicolonKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Filters' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Strategies' '{' '}' (ambiguity) 'Items' '{' configs+=PersistenceConfiguration
	 *     (rule start) 'Strategies' '{' '}' (ambiguity) ('Items' '{' '}')? (rule start)
	 *     defaults+=[Strategy|ID] '}' (ambiguity) 'Items' '{' configs+=PersistenceConfiguration
	 *     defaults+=[Strategy|ID] '}' (ambiguity) ('Items' '{' '}')? (rule end)
	 *     strategies+=Strategy '}' (ambiguity) 'Items' '{' configs+=PersistenceConfiguration
	 *     strategies+=Strategy '}' (ambiguity) ('Items' '{' '}')? (rule end)
	 */
	protected void emit_PersistenceModel___FiltersKeyword_6_0_LeftCurlyBracketKeyword_6_1_RightCurlyBracketKeyword_6_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Items' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Strategies' '{' '}' ('Filters' '{' '}')? (ambiguity) (rule start)
	 *     defaults+=[Strategy|ID] '}' ('Filters' '{' '}')? (ambiguity) (rule end)
	 *     filters+=Filter '}' (ambiguity) (rule end)
	 *     strategies+=Strategy '}' ('Filters' '{' '}')? (ambiguity) (rule end)
	 */
	protected void emit_PersistenceModel___ItemsKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
