/*
 * generated by Xtext 2.19.0
 */
grammar InternalItems;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.openhab.core.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.openhab.core.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.openhab.core.model.services.ItemsGrammarAccess;

}

@parser::members {

 	private ItemsGrammarAccess grammarAccess;

    public InternalItemsParser(TokenStream input, ItemsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ItemModel";
   	}

   	@Override
   	protected ItemsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleItemModel
entryRuleItemModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemModelRule()); }
	iv_ruleItemModel=ruleItemModel
	{ $current=$iv_ruleItemModel.current; }
	EOF;

// Rule ItemModel
ruleItemModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getItemModelAccess().getItemModelAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getItemModelAccess().getItemsModelItemParserRuleCall_1_0());
				}
				lv_items_1_0=ruleModelItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemModelRule());
					}
					add(
						$current,
						"items",
						lv_items_1_0,
						"org.openhab.core.model.Items.ModelItem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModelItem
entryRuleModelItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelItemRule()); }
	iv_ruleModelItem=ruleModelItem
	{ $current=$iv_ruleModelItem.current; }
	EOF;

// Rule ModelItem
ruleModelItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelItemAccess().getModelNormalItemParserRuleCall_0_0());
			}
			this_ModelNormalItem_0=ruleModelNormalItem
			{
				$current = $this_ModelNormalItem_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getModelItemAccess().getModelGroupItemParserRuleCall_0_1());
			}
			this_ModelGroupItem_1=ruleModelGroupItem
			{
				$current = $this_ModelGroupItem_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getModelItemAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelItemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.openhab.core.model.Items.ID");
				}
			)
		)
		(
			(
				lv_label_3_0=RULE_STRING
				{
					newLeafNode(lv_label_3_0, grammarAccess.getModelItemAccess().getLabelSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelItemRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_3_0,
						"org.openhab.core.model.Items.STRING");
				}
			)
		)?
		(
			otherlv_4='<'
			{
				newLeafNode(otherlv_4, grammarAccess.getModelItemAccess().getLessThanSignKeyword_3_0());
			}
			(
				(
					(
						lv_icon_5_1=RULE_ID
						{
							newLeafNode(lv_icon_5_1, grammarAccess.getModelItemAccess().getIconIDTerminalRuleCall_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelItemRule());
							}
							setWithLastConsumed(
								$current,
								"icon",
								lv_icon_5_1,
								"org.openhab.core.model.Items.ID");
						}
						    |
						lv_icon_5_2=RULE_STRING
						{
							newLeafNode(lv_icon_5_2, grammarAccess.getModelItemAccess().getIconSTRINGTerminalRuleCall_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelItemRule());
							}
							setWithLastConsumed(
								$current,
								"icon",
								lv_icon_5_2,
								"org.openhab.core.model.Items.STRING");
						}
					)
				)
			)
			otherlv_6='>'
			{
				newLeafNode(otherlv_6, grammarAccess.getModelItemAccess().getGreaterThanSignKeyword_3_2());
			}
		)?
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getModelItemAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					lv_groups_8_0=RULE_ID
					{
						newLeafNode(lv_groups_8_0, grammarAccess.getModelItemAccess().getGroupsIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelItemRule());
						}
						addWithLastConsumed(
							$current,
							"groups",
							lv_groups_8_0,
							"org.openhab.core.model.Items.ID");
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getModelItemAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						lv_groups_10_0=RULE_ID
						{
							newLeafNode(lv_groups_10_0, grammarAccess.getModelItemAccess().getGroupsIDTerminalRuleCall_4_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelItemRule());
							}
							addWithLastConsumed(
								$current,
								"groups",
								lv_groups_10_0,
								"org.openhab.core.model.Items.ID");
						}
					)
				)
			)*
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getModelItemAccess().getRightParenthesisKeyword_4_3());
			}
		)?
		(
			otherlv_12='['
			{
				newLeafNode(otherlv_12, grammarAccess.getModelItemAccess().getLeftSquareBracketKeyword_5_0());
			}
			(
				(
					(
						lv_tags_13_1=RULE_ID
						{
							newLeafNode(lv_tags_13_1, grammarAccess.getModelItemAccess().getTagsIDTerminalRuleCall_5_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelItemRule());
							}
							addWithLastConsumed(
								$current,
								"tags",
								lv_tags_13_1,
								"org.openhab.core.model.Items.ID");
						}
						    |
						lv_tags_13_2=RULE_STRING
						{
							newLeafNode(lv_tags_13_2, grammarAccess.getModelItemAccess().getTagsSTRINGTerminalRuleCall_5_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelItemRule());
							}
							addWithLastConsumed(
								$current,
								"tags",
								lv_tags_13_2,
								"org.openhab.core.model.Items.STRING");
						}
					)
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getModelItemAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						(
							lv_tags_15_1=RULE_ID
							{
								newLeafNode(lv_tags_15_1, grammarAccess.getModelItemAccess().getTagsIDTerminalRuleCall_5_2_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getModelItemRule());
								}
								addWithLastConsumed(
									$current,
									"tags",
									lv_tags_15_1,
									"org.openhab.core.model.Items.ID");
							}
							    |
							lv_tags_15_2=RULE_STRING
							{
								newLeafNode(lv_tags_15_2, grammarAccess.getModelItemAccess().getTagsSTRINGTerminalRuleCall_5_2_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getModelItemRule());
								}
								addWithLastConsumed(
									$current,
									"tags",
									lv_tags_15_2,
									"org.openhab.core.model.Items.STRING");
							}
						)
					)
				)
			)*
			otherlv_16=']'
			{
				newLeafNode(otherlv_16, grammarAccess.getModelItemAccess().getRightSquareBracketKeyword_5_3());
			}
		)?
		(
			otherlv_17='{'
			{
				newLeafNode(otherlv_17, grammarAccess.getModelItemAccess().getLeftCurlyBracketKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelItemAccess().getBindingsModelBindingParserRuleCall_6_1_0());
					}
					lv_bindings_18_0=ruleModelBinding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelItemRule());
						}
						add(
							$current,
							"bindings",
							lv_bindings_18_0,
							"org.openhab.core.model.Items.ModelBinding");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_19=','
				{
					newLeafNode(otherlv_19, grammarAccess.getModelItemAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModelItemAccess().getBindingsModelBindingParserRuleCall_6_2_1_0());
						}
						lv_bindings_20_0=ruleModelBinding
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelItemRule());
							}
							add(
								$current,
								"bindings",
								lv_bindings_20_0,
								"org.openhab.core.model.Items.ModelBinding");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_21='}'
			{
				newLeafNode(otherlv_21, grammarAccess.getModelItemAccess().getRightCurlyBracketKeyword_6_3());
			}
		)?
	)
;

// Entry rule entryRuleModelGroupItem
entryRuleModelGroupItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelGroupItemRule()); }
	iv_ruleModelGroupItem=ruleModelGroupItem
	{ $current=$iv_ruleModelGroupItem.current; }
	EOF;

// Rule ModelGroupItem
ruleModelGroupItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelGroupItemAccess().getModelGroupItemAction_0(),
					$current);
			}
		)
		otherlv_1='Group'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelGroupItemAccess().getGroupKeyword_1());
		}
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getModelGroupItemAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelGroupItemAccess().getTypeModelItemTypeParserRuleCall_2_1_0());
					}
					lv_type_3_0=ruleModelItemType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelGroupItemRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.openhab.core.model.Items.ModelItemType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getModelGroupItemAccess().getColonKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModelGroupItemAccess().getFunctionModelGroupFunctionEnumRuleCall_2_2_1_0());
						}
						lv_function_5_0=ruleModelGroupFunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelGroupItemRule());
							}
							set(
								$current,
								"function",
								lv_function_5_0,
								"org.openhab.core.model.Items.ModelGroupFunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6='('
					{
						newLeafNode(otherlv_6, grammarAccess.getModelGroupItemAccess().getLeftParenthesisKeyword_2_2_2_0());
					}
					(
						(
							(
								lv_args_7_1=RULE_ID
								{
									newLeafNode(lv_args_7_1, grammarAccess.getModelGroupItemAccess().getArgsIDTerminalRuleCall_2_2_2_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getModelGroupItemRule());
									}
									addWithLastConsumed(
										$current,
										"args",
										lv_args_7_1,
										"org.openhab.core.model.Items.ID");
								}
								    |
								lv_args_7_2=RULE_STRING
								{
									newLeafNode(lv_args_7_2, grammarAccess.getModelGroupItemAccess().getArgsSTRINGTerminalRuleCall_2_2_2_1_0_1());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getModelGroupItemRule());
									}
									addWithLastConsumed(
										$current,
										"args",
										lv_args_7_2,
										"org.openhab.core.model.Items.STRING");
								}
							)
						)
					)
					(
						otherlv_8=','
						{
							newLeafNode(otherlv_8, grammarAccess.getModelGroupItemAccess().getCommaKeyword_2_2_2_2_0());
						}
						(
							(
								(
									lv_args_9_1=RULE_ID
									{
										newLeafNode(lv_args_9_1, grammarAccess.getModelGroupItemAccess().getArgsIDTerminalRuleCall_2_2_2_2_1_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getModelGroupItemRule());
										}
										addWithLastConsumed(
											$current,
											"args",
											lv_args_9_1,
											"org.openhab.core.model.Items.ID");
									}
									    |
									lv_args_9_2=RULE_STRING
									{
										newLeafNode(lv_args_9_2, grammarAccess.getModelGroupItemAccess().getArgsSTRINGTerminalRuleCall_2_2_2_2_1_0_1());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getModelGroupItemRule());
										}
										addWithLastConsumed(
											$current,
											"args",
											lv_args_9_2,
											"org.openhab.core.model.Items.STRING");
									}
								)
							)
						)
					)*
					otherlv_10=')'
					{
						newLeafNode(otherlv_10, grammarAccess.getModelGroupItemAccess().getRightParenthesisKeyword_2_2_2_3());
					}
				)?
			)?
		)?
	)
;

// Entry rule entryRuleModelNormalItem
entryRuleModelNormalItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelNormalItemRule()); }
	iv_ruleModelNormalItem=ruleModelNormalItem
	{ $current=$iv_ruleModelNormalItem.current; }
	EOF;

// Rule ModelNormalItem
ruleModelNormalItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelNormalItemAccess().getTypeModelItemTypeParserRuleCall_0());
			}
			lv_type_0_0=ruleModelItemType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelNormalItemRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.openhab.core.model.Items.ModelItemType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleModelItemType
entryRuleModelItemType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getModelItemTypeRule()); }
	iv_ruleModelItemType=ruleModelItemType
	{ $current=$iv_ruleModelItemType.current.getText(); }
	EOF;

// Rule ModelItemType
ruleModelItemType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelItemTypeAccess().getBaseModelItemTypeParserRuleCall_0());
		}
		this_BaseModelItemType_0=ruleBaseModelItemType
		{
			$current.merge(this_BaseModelItemType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='Number'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getModelItemTypeAccess().getNumberKeyword_1_0());
			}
			(
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getModelItemTypeAccess().getColonKeyword_1_1_0());
				}
				this_ID_3=RULE_ID
				{
					$current.merge(this_ID_3);
				}
				{
					newLeafNode(this_ID_3, grammarAccess.getModelItemTypeAccess().getIDTerminalRuleCall_1_1_1());
				}
			)?
		)
	)
;

// Entry rule entryRuleBaseModelItemType
entryRuleBaseModelItemType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBaseModelItemTypeRule()); }
	iv_ruleBaseModelItemType=ruleBaseModelItemType
	{ $current=$iv_ruleBaseModelItemType.current.getText(); }
	EOF;

// Rule BaseModelItemType
ruleBaseModelItemType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Switch'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getSwitchKeyword_0());
		}
		    |
		kw='Rollershutter'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getRollershutterKeyword_1());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getStringKeyword_2());
		}
		    |
		kw='Dimmer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getDimmerKeyword_3());
		}
		    |
		kw='Contact'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getContactKeyword_4());
		}
		    |
		kw='DateTime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getDateTimeKeyword_5());
		}
		    |
		kw='Color'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getColorKeyword_6());
		}
		    |
		kw='Player'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getPlayerKeyword_7());
		}
		    |
		kw='Location'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getLocationKeyword_8());
		}
		    |
		kw='Call'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getCallKeyword_9());
		}
		    |
		kw='Image'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBaseModelItemTypeAccess().getImageKeyword_10());
		}
	)
;

// Entry rule entryRuleModelBinding
entryRuleModelBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelBindingRule()); }
	iv_ruleModelBinding=ruleModelBinding
	{ $current=$iv_ruleModelBinding.current; }
	EOF;

// Rule ModelBinding
ruleModelBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0=RULE_ID
				{
					newLeafNode(lv_type_0_0, grammarAccess.getModelBindingAccess().getTypeIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelBindingRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_0_0,
						"org.openhab.core.model.Items.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getModelBindingAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_configuration_2_0=RULE_STRING
				{
					newLeafNode(lv_configuration_2_0, grammarAccess.getModelBindingAccess().getConfigurationSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelBindingRule());
					}
					setWithLastConsumed(
						$current,
						"configuration",
						lv_configuration_2_0,
						"org.openhab.core.model.Items.STRING");
				}
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getModelBindingAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelBindingAccess().getPropertiesModelPropertyParserRuleCall_3_1_0());
					}
					lv_properties_4_0=ruleModelProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelBindingRule());
						}
						add(
							$current,
							"properties",
							lv_properties_4_0,
							"org.openhab.core.model.Items.ModelProperty");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getModelBindingAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModelBindingAccess().getPropertiesModelPropertyParserRuleCall_3_2_1_0());
						}
						lv_properties_6_0=ruleModelProperty
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelBindingRule());
							}
							add(
								$current,
								"properties",
								lv_properties_6_0,
								"org.openhab.core.model.Items.ModelProperty");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getModelBindingAccess().getRightSquareBracketKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleModelProperty
entryRuleModelProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelPropertyRule()); }
	iv_ruleModelProperty=ruleModelProperty
	{ $current=$iv_ruleModelProperty.current; }
	EOF;

// Rule ModelProperty
ruleModelProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_ID
				{
					newLeafNode(lv_key_0_0, grammarAccess.getModelPropertyAccess().getKeyIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"org.openhab.core.model.Items.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getModelPropertyAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelPropertyAccess().getValueValueTypeParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelPropertyRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.openhab.core.model.Items.ValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValueType
entryRuleValueType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	iv_ruleValueType=ruleValueType
	{ $current=$iv_ruleValueType.current.getText(); }
	EOF;

// Rule ValueType
ruleValueType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getValueTypeAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getNUMBERParserRuleCall_1());
		}
		this_NUMBER_1=ruleNUMBER
		{
			$current.merge(this_NUMBER_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getBOOLEANParserRuleCall_2());
		}
		this_BOOLEAN_2=ruleBOOLEAN
		{
			$current.merge(this_BOOLEAN_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current.getText(); }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getNUMBERAccess().getIDTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_2_0());
			}
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getNUMBERAccess().getIDTerminalRuleCall_2_1());
			}
		)?
	)
;

// Rule ModelGroupFunction
ruleModelGroupFunction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='EQUALITY'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getEQUALITYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModelGroupFunctionAccess().getEQUALITYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='AND'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModelGroupFunctionAccess().getANDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='OR'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getModelGroupFunctionAccess().getOREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='NAND'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getNANDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getModelGroupFunctionAccess().getNANDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='NOR'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getNOREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getModelGroupFunctionAccess().getNOREnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='AVG'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getAVGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getModelGroupFunctionAccess().getAVGEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='SUM'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getSUMEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getModelGroupFunctionAccess().getSUMEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='MAX'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getMAXEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getModelGroupFunctionAccess().getMAXEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='MIN'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getMINEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getModelGroupFunctionAccess().getMINEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='COUNT'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getCOUNTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getModelGroupFunctionAccess().getCOUNTEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='LATEST'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getLATESTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getModelGroupFunctionAccess().getLATESTEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='EARLIEST'
			{
				$current = grammarAccess.getModelGroupFunctionAccess().getEARLIESTEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getModelGroupFunctionAccess().getEARLIESTEnumLiteralDeclaration_11());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
