/**
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.thing.thing.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.openhab.core.model.thing.thing.ModelBridge;
import org.openhab.core.model.thing.thing.ModelThing;
import org.openhab.core.model.thing.thing.ThingPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model Bridge</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.openhab.core.model.thing.thing.impl.ModelBridgeImpl#isBridge <em>Bridge</em>}</li>
 *   <li>{@link org.openhab.core.model.thing.thing.impl.ModelBridgeImpl#getThings <em>Things</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelBridgeImpl extends ModelThingImpl implements ModelBridge
{
  /**
   * The default value of the '{@link #isBridge() <em>Bridge</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBridge()
   * @generated
   * @ordered
   */
  protected static final boolean BRIDGE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBridge() <em>Bridge</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBridge()
   * @generated
   * @ordered
   */
  protected boolean bridge = BRIDGE_EDEFAULT;

  /**
   * The cached value of the '{@link #getThings() <em>Things</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThings()
   * @generated
   * @ordered
   */
  protected EList<ModelThing> things;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelBridgeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ThingPackage.Literals.MODEL_BRIDGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isBridge()
  {
    return bridge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBridge(boolean newBridge)
  {
    boolean oldBridge = bridge;
    bridge = newBridge;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingPackage.MODEL_BRIDGE__BRIDGE, oldBridge, bridge));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ModelThing> getThings()
  {
    if (things == null)
    {
      things = new EObjectContainmentEList<ModelThing>(ModelThing.class, this, ThingPackage.MODEL_BRIDGE__THINGS);
    }
    return things;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ThingPackage.MODEL_BRIDGE__THINGS:
        return ((InternalEList<?>)getThings()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ThingPackage.MODEL_BRIDGE__BRIDGE:
        return isBridge();
      case ThingPackage.MODEL_BRIDGE__THINGS:
        return getThings();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ThingPackage.MODEL_BRIDGE__BRIDGE:
        setBridge((Boolean)newValue);
        return;
      case ThingPackage.MODEL_BRIDGE__THINGS:
        getThings().clear();
        getThings().addAll((Collection<? extends ModelThing>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ThingPackage.MODEL_BRIDGE__BRIDGE:
        setBridge(BRIDGE_EDEFAULT);
        return;
      case ThingPackage.MODEL_BRIDGE__THINGS:
        getThings().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ThingPackage.MODEL_BRIDGE__BRIDGE:
        return bridge != BRIDGE_EDEFAULT;
      case ThingPackage.MODEL_BRIDGE__THINGS:
        return things != null && !things.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (bridge: ");
    result.append(bridge);
    result.append(')');
    return result.toString();
  }

} //ModelBridgeImpl
