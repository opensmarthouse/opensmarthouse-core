/**
 * generated by Xtext 2.19.0
 */
package org.openhab.core.model.thing.thing.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.openhab.core.model.thing.thing.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ThingFactoryImpl extends EFactoryImpl implements ThingFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ThingFactory init()
  {
    try
    {
      ThingFactory theThingFactory = (ThingFactory)EPackage.Registry.INSTANCE.getEFactory(ThingPackage.eNS_URI);
      if (theThingFactory != null)
      {
        return theThingFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ThingFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ThingPackage.THING_MODEL: return createThingModel();
      case ThingPackage.MODEL_PROPERTY_CONTAINER: return createModelPropertyContainer();
      case ThingPackage.MODEL_THING: return createModelThing();
      case ThingPackage.MODEL_CHANNEL: return createModelChannel();
      case ThingPackage.MODEL_PROPERTY: return createModelProperty();
      case ThingPackage.MODEL_BRIDGE: return createModelBridge();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingModel createThingModel()
  {
    ThingModelImpl thingModel = new ThingModelImpl();
    return thingModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelPropertyContainer createModelPropertyContainer()
  {
    ModelPropertyContainerImpl modelPropertyContainer = new ModelPropertyContainerImpl();
    return modelPropertyContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelThing createModelThing()
  {
    ModelThingImpl modelThing = new ModelThingImpl();
    return modelThing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelChannel createModelChannel()
  {
    ModelChannelImpl modelChannel = new ModelChannelImpl();
    return modelChannel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelProperty createModelProperty()
  {
    ModelPropertyImpl modelProperty = new ModelPropertyImpl();
    return modelProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelBridge createModelBridge()
  {
    ModelBridgeImpl modelBridge = new ModelBridgeImpl();
    return modelBridge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingPackage getThingPackage()
  {
    return (ThingPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ThingPackage getPackage()
  {
    return ThingPackage.eINSTANCE;
  }

} //ThingFactoryImpl
